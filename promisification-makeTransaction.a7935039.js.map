{"version":3,"sources":["js/promisification-makeTransaction.js"],"names":["randomIntegerFromInterval","min","max","Math","floor","random","makeTransaction","transaction","delay","Promise","resolve","reject","setTimeout","canProcess","id","time","logSuccess","console","log","logError","warn","amount","then","catch"],"mappings":"AAAI;AACA;AAEJ,IAAMA,yBAAyB,GAAG,SAA5BA,yBAA4B,CAACC,GAAD,EAAMC,GAAN,EAAc;AAC5C,SAAOC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiBH,GAAG,GAAGD,GAAN,GAAY,CAA7B,IAAkCA,GAA7C,CAAP;AACH,CAFD;;AAIA,IAAMK,eAAe,GAAG,SAAlBA,eAAkB,CAAAC,WAAW,EAAI;AACnC,MAAMC,KAAK,GAAGR,yBAAyB,CAAC,GAAD,EAAM,GAAN,CAAvC;AAEA,SAAO,IAAIS,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpCC,IAAAA,UAAU,CAAC,YAAM;AACb,UAAMC,UAAU,GAAGV,IAAI,CAACE,MAAL,KAAgB,GAAnC;;AAEA,UAAIQ,UAAJ,EAAgB;AACZH,QAAAA,OAAO,CAAC;AAAEI,UAAAA,EAAE,EAAEP,WAAW,CAACO,EAAlB;AAAsBC,UAAAA,IAAI,EAAEP;AAA5B,SAAD,CAAP;AACH;;AAEDG,MAAAA,MAAM,CAACJ,WAAW,CAACO,EAAb,CAAN;AACH,KARS,EAQPN,KARO,CAAV;AASH,GAVM,CAAP;AAWH,CAdD;;AAgBA,IAAMQ,UAAU,GAAG,SAAbA,UAAa,OAAkB;AAAA,MAAfF,EAAe,QAAfA,EAAe;AAAA,MAAXC,IAAW,QAAXA,IAAW;AACjCE,EAAAA,OAAO,CAACC,GAAR,uBAA2BJ,EAA3B,2BAA8CC,IAA9C;AACH,CAFD;;AAIA,IAAMI,QAAQ,GAAG,SAAXA,QAAW,CAAAL,EAAE,EAAI;AACnBG,EAAAA,OAAO,CAACG,IAAR,wCAA6CN,EAA7C;AACH,CAFD;;AAIAR,eAAe,CAAC;AAAEQ,EAAAA,EAAE,EAAE,EAAN;AAAUO,EAAAA,MAAM,EAAE;AAAlB,CAAD,CAAf,CAAyCC,IAAzC,CAA8CN,UAA9C,EAA0DO,KAA1D,CAAgEJ,QAAhE;AAEAb,eAAe,CAAC;AAAEQ,EAAAA,EAAE,EAAE,EAAN;AAAUO,EAAAA,MAAM,EAAE;AAAlB,CAAD,CAAf,CAAyCC,IAAzC,CAA8CN,UAA9C,EAA0DO,KAA1D,CAAgEJ,QAAhE;AAEAb,eAAe,CAAC;AAAEQ,EAAAA,EAAE,EAAE,EAAN;AAAUO,EAAAA,MAAM,EAAE;AAAlB,CAAD,CAAf,CAAwCC,IAAxC,CAA6CN,UAA7C,EAAyDO,KAAzD,CAA+DJ,QAA/D;AAEAb,eAAe,CAAC;AAAEQ,EAAAA,EAAE,EAAE,EAAN;AAAUO,EAAAA,MAAM,EAAE;AAAlB,CAAD,CAAf,CAAyCC,IAAzC,CAA8CN,UAA9C,EAA0DO,KAA1D,CAAgEJ,QAAhE","file":"promisification-makeTransaction.a7935039.js","sourceRoot":"..","sourcesContent":["    // Задание 3\n    // Перепиши функцию makeTransaction() так, чтобы она не использовала callback - функции onSuccess и onError, а принимала всего один параметр transaction и возвращала промис.\n\nconst randomIntegerFromInterval = (min, max) => {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nconst makeTransaction = transaction => {\n    const delay = randomIntegerFromInterval(200, 500);\n\n    return new Promise((resolve, reject) => {\n        setTimeout(() => {\n            const canProcess = Math.random() > 0.3;\n\n            if (canProcess) {\n                resolve({ id: transaction.id, time: delay });\n            }\n\n            reject(transaction.id);\n        }, delay);\n    });\n};\n\nconst logSuccess = ({ id, time }) => {\n    console.log(`Transaction ${id} processed in ${time} ms`);\n};\n\nconst logError = id => {\n    console.warn(`Error processing transaction ${id}. Please try again later.`);\n};\n\nmakeTransaction({ id: 70, amount: 150 }).then(logSuccess).catch(logError);\n\nmakeTransaction({ id: 71, amount: 230 }).then(logSuccess).catch(logError);\n\nmakeTransaction({ id: 72, amount: 75 }).then(logSuccess).catch(logError);\n\nmakeTransaction({ id: 73, amount: 100 }).then(logSuccess).catch(logError);"]}