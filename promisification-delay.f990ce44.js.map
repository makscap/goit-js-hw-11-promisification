{"version":3,"sources":["js/promisification-delay.js"],"names":["delay","ms","Promise","resolve","setTimeout","logger","time","console","log","then"],"mappings":"AAAA;AACA;AACA;AACA;AAEA,IAAMA,KAAK,GAAG,SAARA,KAAQ,CAAAC,EAAE,EAAI;AAChB,SAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAa;AAC5BC,IAAAA,UAAU,CAAC,YAAM;AACbD,MAAAA,OAAO,CAACF,EAAD,CAAP;AACH,KAFS,EAEPA,EAFO,CAAV;AAGH,GAJM,CAAP;AAKD,CANH;;AAQE,IAAMI,MAAM,GAAG,SAATA,MAAS,CAAAC,IAAI;AAAA,SAAIC,OAAO,CAACC,GAAR,0BAA8BF,IAA9B,QAAJ;AAAA,CAAnB,EAEA;;;AACAN,KAAK,CAAC,IAAD,CAAL,CAAYS,IAAZ,CAAiBJ,MAAjB,GAA0B;;AAC1BL,KAAK,CAAC,IAAD,CAAL,CAAYS,IAAZ,CAAiBJ,MAAjB,GAA0B;;AAC1BL,KAAK,CAAC,IAAD,CAAL,CAAYS,IAAZ,CAAiBJ,MAAjB,GAA0B","file":"promisification-delay.f990ce44.js","sourceRoot":"..","sourcesContent":["// Задание 1\n// Напиши функцию delay(ms), \n// которая возвращает промис, \n// переходящий в состояние \"resolved\" через ms миллисекунд. Значением исполнившегося промиса должно быть то кол-во миллисекунд которое передали во время вызова функции delay.\n\nconst delay = ms => {\n    return new Promise((resolve) => {\n        setTimeout(() => {\n            resolve(ms);\n        }, ms)\n    })\n  };\n  \n  const logger = time => console.log(`Resolved after ${time}ms`);\n  \n  // Вызовы функции для проверки\n  delay(2000).then(logger); // Resolved after 2000ms\n  delay(1000).then(logger); // Resolved after 1000ms\n  delay(1500).then(logger); // Resolved after 1500ms"]}